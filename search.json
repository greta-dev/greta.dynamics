[{"path":"https://greta-dev.github.io/greta.dynamics/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://greta-dev.github.io/greta.dynamics/LICENSE.html","id":"1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://greta-dev.github.io/greta.dynamics/LICENSE.html","id":"2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://greta-dev.github.io/greta.dynamics/LICENSE.html","id":"3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://greta-dev.github.io/greta.dynamics/LICENSE.html","id":"4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://greta-dev.github.io/greta.dynamics/LICENSE.html","id":"5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://greta-dev.github.io/greta.dynamics/LICENSE.html","id":"6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://greta-dev.github.io/greta.dynamics/LICENSE.html","id":"7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://greta-dev.github.io/greta.dynamics/LICENSE.html","id":"8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://greta-dev.github.io/greta.dynamics/LICENSE.html","id":"9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://greta-dev.github.io/greta.dynamics/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://greta-dev.github.io/greta.dynamics/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nick Golding. Author, copyright holder. Nicholas Tierney. Author, maintainer.","code":""},{"path":"https://greta-dev.github.io/greta.dynamics/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Golding N, Tierney N (2022). greta.dynamics: Modelling Structured Dynamical Systems 'greta'. https://github.com/greta-dev/greta.dynamics, https://greta-dev.github.io/greta.dynamics/.","code":"@Manual{,   title = {greta.dynamics: Modelling Structured Dynamical Systems in 'greta'},   author = {Nick Golding and Nicholas Tierney},   year = {2022},   note = {https://github.com/greta-dev/greta.dynamics, https://greta-dev.github.io/greta.dynamics/}, }"},{"path":"https://greta-dev.github.io/greta.dynamics/index.html","id":"gretadynamics-dynamical-models-in-greta","dir":"","previous_headings":"","what":"Modelling Structured Dynamical Systems in greta","title":"Modelling Structured Dynamical Systems in greta","text":"greta.dynamics provides functions modelling dynamical systems greta. currently provides functions analysing transition matrices iteration, solving ordinary differential equations.","code":""},{"path":"https://greta-dev.github.io/greta.dynamics/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Modelling Structured Dynamical Systems in greta","text":"can install current release version greta.dynamics CRAN: install development version greta.dynamics r-universe: can also install development version greta.dynamics via GitHub:","code":"install.packages(\"greta.dynamics\") install.packages(\"greta.dynamics\", repos = \"https://greta-dev.r-universe.dev\") remotes::install_github(\"greta-dev/greta.dynamics\")"},{"path":"https://greta-dev.github.io/greta.dynamics/reference/greta.dynamics.html","id":null,"dir":"Reference","previous_headings":"","what":"greta.dynamics: a greta extension for modelling dynamical systems — greta.dynamics","title":"greta.dynamics: a greta extension for modelling dynamical systems — greta.dynamics","text":"extension greta functions simulating dynamical systems, defined ordinary differential equations (see ode_solve()) transition matrices (iterate_matrix()).","code":""},{"path":"https://greta-dev.github.io/greta.dynamics/reference/iterate_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"iterate transition matrices — iterate_matrix","title":"iterate transition matrices — iterate_matrix","text":"Calculate intrinsic growth rate(s) stable stage distribution(s) stage-structured dynamical system, encoded state_t = matrix \\%*\\% state_tm1.","code":""},{"path":"https://greta-dev.github.io/greta.dynamics/reference/iterate_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"iterate transition matrices — iterate_matrix","text":"","code":"iterate_matrix(   matrix,   initial_state = rep(1, ncol(matrix)),   niter = 100,   tol = 1e-06 )"},{"path":"https://greta-dev.github.io/greta.dynamics/reference/iterate_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"iterate transition matrices — iterate_matrix","text":"matrix either square 2D transition matrix (dimensions m x m), 3D array (dimensions n x m x m), giving one transition matrices iterate initial_state either column vector (m elements) 3D array (dimensions n x m x 1) giving one initial states iterate matrix niter positive integer giving maximum number times iterate matrix tol scalar giving numerical tolerance, algorithm determined converged growth rate stages","code":""},{"path":"https://greta-dev.github.io/greta.dynamics/reference/iterate_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"iterate transition matrices — iterate_matrix","text":"named list five greta arrays: lambda scalar vector giving ratio first stage values final two iterations. stable_state vector matrix (dimensions initial_state) giving state final iteration, normalised values stages sum one. all_states n x m x niter matrix state values iteration. 0 entries iterations. converged integer scalar vector indicating whether iterations matrix converged tolerance less tol (1 , 0 ) algorithm finished. iterations scalar maximum number iterations completed algorithm terminated. match niter converged FALSE.","code":""},{"path":"https://greta-dev.github.io/greta.dynamics/reference/iterate_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"iterate transition matrices — iterate_matrix","text":"iterate_matrix can either act single transition matrix initial state (matrix 2D initial_state column vector), can simultaneously act n different matrices /n different initial states (matrix initial_state 3D arrays). latter case, first dimension objects batch dimension n. ensure matrix iterated specific number iterations, can set number niter, set tol 0 negative number ensure iterations stopped early.","code":""},{"path":"https://greta-dev.github.io/greta.dynamics/reference/iterate_matrix.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"iterate transition matrices — iterate_matrix","text":"greta vectorises across MCMC chains calculation greta array values, algorithm run chains (posterior samples), sites stages converged stable growth. single value converged iterations returned, value always value mcmc.list object. inspecting MCMC trace parameters tell whether iteration converged posterior samples, maximum number iterations required across samples","code":""},{"path":"https://greta-dev.github.io/greta.dynamics/reference/iterate_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"iterate transition matrices — iterate_matrix","text":"","code":"if (FALSE) { # simulate from a probabilistic 4-stage transition matrix model k <- 4  # component variables # survival probability for all stages survival <- uniform(0, 1, dim = k) # conditional (on survival) probability of staying in a stage stasis <- c(uniform(0, 1, dim = k - 1), 1) # marginal probability of staying/progressing stay <- survival * stasis progress <- (survival * (1 - stay))[1:(k - 1)] # recruitment rate for the largest two stages recruit <- exponential(c(3, 5))  # combine into a matrix: tmat <- zeros(k, k) diag(tmat) <- stay progress_idx <- row(tmat) - col(tmat) == 1 tmat[progress_idx] <- progress tmat[1, k - (1:0)] <- recruit  # analyse this to get the intrinsic growth rate and stable state iterations <- iterate_matrix(tmat) iterations$lambda iterations$stable_distribution iterations$all_states  # Can also do this simultaneously for a collection of transition matrices k <- 2 n <- 10 survival <- uniform(0, 1, dim = c(n, k)) stasis <- cbind(uniform(0, 1, dim = n), rep(1, n)) stay <- survival * stasis progress <- (survival * (1 - stasis))[, 1] recruit_rate <- 1 / seq(0.1, 5, length.out = n) recruit <- exponential(recruit_rate, dim = n) tmats <- zeros(10, 2, 2) tmats[, 1, 1] <- stasis[, 1] tmats[, 2, 2] <- stasis[, 2] tmats[, 2, 1] <- progress tmats[, 1, 2] <- recruit  iterations <- iterate_matrix(tmats) iterations$lambda iterations$stable_distribution iterations$all_states }"},{"path":"https://greta-dev.github.io/greta.dynamics/reference/ode_solve.html","id":null,"dir":"Reference","previous_headings":"","what":"solve ODEs — ode_solve","title":"solve ODEs — ode_solve","text":"Solve system ordinary differential equations.","code":""},{"path":"https://greta-dev.github.io/greta.dynamics/reference/ode_solve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"solve ODEs — ode_solve","text":"","code":"ode_solve(derivative, y0, times, ..., method = c(\"ode45\", \"rk4\", \"midpoint\"))"},{"path":"https://greta-dev.github.io/greta.dynamics/reference/ode_solve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"solve ODEs — ode_solve","text":"derivative derivative function. first two arguments must 'y' 't', state parameter scalar timestep respectively. remaining parameters must named arguments representing (temporally static) model parameters. Variables distributions defined function. y0 greta array value state parameter y time 0 times column vector times evaluate y ... named arguments giving greta arrays additional (fixed) parameters method solver use. \"ode45\" uses adaptive step sizes, whilst \"rk4\" \"midpoint\" use fixed grid defined times; may faster less accurate \"ode45\".","code":""},{"path":"https://greta-dev.github.io/greta.dynamics/reference/ode_solve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"solve ODEs — ode_solve","text":"greta array","code":""},{"path":"https://greta-dev.github.io/greta.dynamics/reference/ode_solve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"solve ODEs — ode_solve","text":"","code":"if (FALSE) { # replicate the Lotka-Volterra example from deSolve library(deSolve) LVmod <- function(Time, State, Pars) {   with(as.list(c(State, Pars)), {     Ingestion <- rIng * Prey * Predator     GrowthPrey <- rGrow * Prey * (1 - Prey / K)     MortPredator <- rMort * Predator      dPrey <- GrowthPrey - Ingestion     dPredator <- Ingestion * assEff - MortPredator      return(list(c(dPrey, dPredator)))   }) }  pars <- c(   rIng = 0.2, # /day, rate of ingestion   rGrow = 1.0, # /day, growth rate of prey   rMort = 0.2, # /day, mortality rate of predator   assEff = 0.5, # -, assimilation efficiency   K = 10 ) # mmol/m3, carrying capacity  yini <- c(Prey = 1, Predator = 2) times <- seq(0, 30, by = 1) out <- ode(yini, times, LVmod, pars)  # simulate observations jitter <- rnorm(2 * length(times), 0, 0.1) y_obs <- out[, -1] + matrix(jitter, ncol = 2)  # ~~~~~~~~~ # fit a greta model to infer the parameters from this simulated data  # greta version of the function lotka_volterra <- function(y, t, rIng, rGrow, rMort, assEff, K) {   Prey <- y[1, 1]   Predator <- y[1, 2]    Ingestion <- rIng * Prey * Predator   GrowthPrey <- rGrow * Prey * (1 - Prey / K)   MortPredator <- rMort * Predator    dPrey <- GrowthPrey - Ingestion   dPredator <- Ingestion * assEff - MortPredator    cbind(dPrey, dPredator) }  # priors for the parameters rIng <- uniform(0, 2) # /day, rate of ingestion rGrow <- uniform(0, 3) # /day, growth rate of prey rMort <- uniform(0, 1) # /day, mortality rate of predator assEff <- uniform(0, 1) # -, assimilation efficiency K <- uniform(0, 30) # mmol/m3, carrying capacity  # initial values and observation error y0 <- uniform(0, 5, dim = c(1, 2)) obs_sd <- uniform(0, 1)  # solution to the ODE y <- ode_solve(lotka_volterra, y0, times, rIng, rGrow, rMort, assEff, K)  # sampling statement/observation model distribution(y_obs) <- normal(y, obs_sd)  # we can use greta to solve directly, for a fixed set of parameters (the true # ones in this case) values <- c(   list(y0 = t(1:2)),   as.list(pars) ) vals <- calculate(y, values = values)[[1]] plot(vals[, 1] ~ times, type = \"l\", ylim = range(vals)) lines(vals[, 2] ~ times, lty = 2) points(y_obs[, 1] ~ times) points(y_obs[, 2] ~ times, pch = 2)  # or we can do inference on the parameters:  # build the model (takes a few seconds to define the tensorflow graph) m <- model(rIng, rGrow, rMort, assEff, K, obs_sd)  # compute MAP estimate o <- opt(m) o }"},{"path":"https://greta-dev.github.io/greta.dynamics/news/index.html","id":"gretadynamics-020","dir":"Changelog","previous_headings":"","what":"greta.dynamics 0.2.0","title":"greta.dynamics 0.2.0","text":"Added NEWS.md file track changes package.","code":""}]
